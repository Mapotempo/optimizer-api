version: '3.7'

x-service-labels: &service-labels
  labels:
    - "mt.environment=${EDT}"
    - "mt.component=optimizer"

x-default-grace: &default-grace
  stop_signal: SIGQUIT
  stop_grace_period: 2m

x-default-update-config: &default-update-config
  failure_action: rollback
  order: start-first

x-default-deploy: &default-deploy
  placement:
    constraints:
      - node.labels.datacenter==${DATACENTER}
  update_config:
    <<: *default-update-config
  restart_policy:
    condition: any

# keep command outside anchor because of performance problems
x-default-redis: &default-redis
  image: redis:${REDIS_VERSION:-6.2.5-alpine}
  <<: *default-grace
  stop_signal: SIGTERM
  <<: *service-labels
  volumes:
    - ${APP_HOME:-..}/redis:/data

x-default-environment: &default-environment
  COUNT_AUTH_TOKEN: ${COUNT_AUTH_TOKEN}
  LOG_LEVEL: ${LOG_LEVEL:-info}
  OPTIM_DEFAULT_MAX_LATENESS_RATIO: 1
  OPTIM_GENERATE_GEOJSON_POLYLINES: 'true'
  PASSENGER_APP_ENV: production
  PROJECT_NAME: ${PROJECT_NAME}
  REDIS_COUNT_HOST: redis-count
  REDIS_HOST: redis-cache
  REDIS_RESQUE_HOST: redis
  REDIS_RESULT_TTL_DAYS: ${REDIS_RESULT_TTL_DAYS}
  ROUTER_API_KEY: ${ROUTER_API_KEY:-demo}
  ROUTER_URL: ${ROUTER_URL:-http://localhost:4899/0.1}
  SENTRY_DSN: ${SENTRY_DSN}

x-environment-resque: &environment-resque
  <<: *default-environment
  APP_ENV: production

x-network-resque: &network-resque
  networks:
    - redis_cache
    - redis_count
    - resque

x-default-service: &default-service
  image: ${REGISTRY:-registry.mapotempo.com}/mapotempo-${EDT:-ce}/optimizer-api:${OPTIMIZER_VERSION:-latest}
  <<: *default-grace
  <<: *service-labels
  deploy:
    <<: *default-deploy
  volumes:
    - ${APP_HOME:-..}/archives/dump:/tmp/optimizer-api/dump
    - ${APP_HOME:-..}/config/access.rb:/srv/app/config/access.rb
    - /etc/localtime:/etc/localtime:ro
  environment:
    <<: *default-environment
  networks:
    - base
    - redis_cache
    - redis_count
    - resque

services:
  redis:
    <<: *default-redis
    hostname: optimizer-${EDT}-redis
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 1G
    command: redis-server --appendonly yes
    networks:
      - resque

  redis-cache:
    <<: *default-redis
    hostname: optimizer-${EDT}-redis-cache
    deploy:
      <<: *default-deploy
    command: redis-server --save ""
    networks:
      - redis_cache

  redis-count:
    <<: *default-redis
    ports:
      - "127.0.0.1:${REDIS_COUNT_PORT}:6379" # HOST:CONTAINER
    volumes:
      - ${APP_HOME:-..}/redis-count:/data
    hostname: optimizer-${EDT}-redis-count
    deploy:
      <<: *default-deploy
      update_config:
        order: stop-first
    command: redis-server --appendonly yes
    networks:
      - redis_count

  count-explorer:
    image: quay.mapotempo.com/mapotempo/count-exporter:0.1.0
    environment:
      AUTH_TOKEN: ${COUNT_AUTH_TOKEN}
      CONTROL_URL: http://${PROJECT_NAME}-api/0.1
    deploy:
      labels:
        - "prometheus-job=count_exporter"
        - "prometheus-port=9090"
        - "prometheus-instance=${APP_URL}"
        - "prometheus-stack=${PROJECT_NAME}"
    networks:
      - base
      - prometheus
      - redis_count

  api:
    <<: *default-service
    stop_grace_period: 5m
    hostname: optimizer-${EDT}-api
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G
      labels:
        - "traefik.app.frontend.rule=Host:${APP_URL}"
        - "traefik.app.port=80"
        - "traefik.app.protocol=http"
        - "traefik.docker.network=base"
        - "traefik.enable=true"

  resque-world:
    <<: *default-service
    stop_grace_period: 18h
    hostname: optimizer-initial-${EDT}-resque-world
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 22G
        reservations:
          memory: 1G
      update_config:
        <<: *default-update-config
        parallelism: 2
      replicas: 2
    command: bundle exec rake resque:work
    environment:
      <<: *environment-resque
      QUEUES: WORLD
    <<: *network-resque

  resque-france:
    <<: *default-service
    stop_grace_period: 18h
    hostname: optimizer-initial-${EDT}-resque-france
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 22G
        reservations:
          memory: 1G
      update_config:
        <<: *default-update-config
        parallelism: 2
      replicas: 2
    command: bundle exec rake resque:work
    environment:
      <<: *environment-resque
      QUEUES: FRANCE
    <<: *network-resque

  resque-test:
    <<: *default-service
    stop_grace_period: 1h
    hostname: optimizer-${EDT}-resque-test
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 1G
      replicas: 2
    command: bundle exec rake resque:work
    environment:
      <<: *environment-resque
      OPTIM_GENERATE_GEOJSON_POLYLINES: 'true'
      QUEUES: TEST
    <<: *network-resque

  resque-large:
    <<: *default-service
    stop_grace_period: 1h
    hostname: optimizer-${EDT}-resque-large
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 2G
    command: bundle exec rake resque:work
    environment:
      <<: *environment-resque
      OPTIM_GENERATE_GEOJSON_POLYLINES: 'true'
      QUEUES: LARGE
    <<: *network-resque

  resque-small:
    <<: *default-service
    stop_grace_period: 1h
    hostname: optimizer-${EDT}-resque-small
    deploy:
      <<: *default-deploy
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 1G
      update_config:
        <<: *default-update-config
        parallelism: 2
      replicas: 3
    command: bundle exec rake resque:work
    environment:
      <<: *environment-resque
      OPTIM_GENERATE_GEOJSON_POLYLINES: 'true'
      QUEUES: SMALL
    <<: *network-resque

  resque-web:
    <<: *default-service
    hostname: optimizer-${EDT}-resque-web
    deploy:
      <<: *default-deploy
      labels:
        - "traefik.app.frontend.auth.basic.users=mapotempo:$$1$$38223$$tW.119Eefw1FPWJbjdY/I0"
        - "traefik.app.frontend.rule=Host:${RESQUE_URL}"
        - "traefik.app.port=5678"
        - "traefik.app.protocol=http"
        - "traefik.docker.network=base"
        - "traefik.enable=true"
    command: bundle exec resque-web -F -d config/initializers/resque.rb
    environment:
      <<: *environment-resque
      QUEUES: SMALL,LARGE,TEST,FRANCE,WORLD

networks:
  base:
    external: ${EXTERNAL_NETWORK:-true}
    driver: overlay
  prometheus:
    external: ${EXTERNAL_NETWORK:-true}
    driver: overlay
  redis_cache:
  redis_count:
  resque:
